/* book.cpp
 * 
 * Kubo Ryosuke
 */

#include "config.h"
#include "book/BookGenerator.h"
#include "logger/Logger.h"

using namespace sunfish;

int generateBook(const std::string& directory) {

  // logger settings
  Loggers::error.addStream(std::cerr, ESC_SEQ_COLOR_RED, ESC_SEQ_COLOR_RESET);
  Loggers::warning.addStream(std::cerr, ESC_SEQ_COLOR_YELLOW, ESC_SEQ_COLOR_RESET);
  Loggers::message.addStream(std::cerr, ESC_SEQ_COLOR_GREEN, ESC_SEQ_COLOR_RESET);
  Loggers::send.addStream(std::cerr, true, true, ESC_SEQ_COLOR_BLUE, ESC_SEQ_COLOR_RESET);
  Loggers::receive.addStream(std::cerr, true, true, ESC_SEQ_COLOR_MAGENTA, ESC_SEQ_COLOR_RESET);
#ifndef NDEBUG
  Loggers::debug.addStream(std::cerr, ESC_SEQ_COLOR_CYAN, ESC_SEQ_COLOR_RESET);
  Loggers::develop.addStream(std::cerr, ESC_SEQ_COLOR_WHITE, ESC_SEQ_COLOR_RESET);
#endif // NDEBUG

  Book book;
  size_t files = BookGenerator::generate(directory, book);
  if (files == 0) {
    Loggers::error << "Error: could not generate book.";
    return 1;
  }
  Loggers::message << "generated by " << files << " records.";

  bool ok = book.writeFile();
  if (!ok) {
    Loggers::error << "Error: could not write to a file.";
    return 1;
  }

  return 0;

}
