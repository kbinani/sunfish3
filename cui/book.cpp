/* book.cpp
 * 
 * Kubo Ryosuke
 */

#include "book/BookGenerator.h"
#include "logger/Logger.h"

using namespace sunfish;

int generateBook(const std::string& directory) {

	// logger settings
	Loggers::error.addStream(std::cerr, "\x1b[31m", "\x1b[39m");
	Loggers::warning.addStream(std::cerr, "\x1b[33m", "\x1b[39m");
	Loggers::message.addStream(std::cerr, "\x1b[32m", "\x1b[39m");
	Loggers::send.addStream(std::cerr, true, true, "\x1b[34m", "\x1b[39m");
	Loggers::receive.addStream(std::cerr, true, true, "\x1b[35m", "\x1b[39m");
#ifndef NDEBUG
	Loggers::debug.addStream(std::cerr, "\x1b[36m", "\x1b[39m");
	Loggers::develop.addStream(std::cerr, "\x1b[37m", "\x1b[39m");
#endif // NDEBUG

	Book book;
	size_t files = BookGenerator::generate(directory, book);
	if (files == 0) {
		Loggers::error << "Error: could not generate book.";
		return 1;
	}
	Loggers::message << "generated by " << files << " records.";

	bool ok = book.writeFile();
	if (!ok) {
		Loggers::error << "Error: could not write to a file.";
		return 1;
	}

	return 0;

}
